pipeline {
    agent {
        docker {
            label 'agent'
            image "rebachi/bank-leumi:agent"
            args '-u 0:0 -v /var/run/docker.sock:/var/run/docker.sock'
            alwaysPull true
        }
    }

    environment {
        registry = "rebachi/bank-leumi"
        registryCredential = 'docker-hub-id-new'
    }

    stages {
        stage('Checkout scm') {
            steps {
                sh 'rm -rf bank-leumi'
                checkout scm
                script {
                    sh 'ls -R'
                }
            }
        }

        stage('Parallel Stage For Static Analysis Tests') {
            parallel {
                stage("Pylint") {
                    steps {
                        dir('bank-leumi') {
                            sh 'pylint --output-format=parseable --fail-under=0 app/app.py'
                        }
                    }
                }

                stage("Bandit Scan") {
                    steps {
                        dir('bank-leumi') {
                            sh 'bandit -r app --severity-level high'
                        }
                    }
                }
            }
        }

        stage("Docker Build") {
            steps {
                dir('bank-leumi') {
                    script {
                        sh "docker build -t ${registry}:${env.BUILD_NUMBER} app"
                    }
                }
            }
        }

        stage("Docker Push") {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        sh "docker push ${registry}:${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Trigger CD Job") {
            steps {
                script {
                    build job: 'CD',
                        parameters: [
                            string(name: 'DOCKER_IMAGE', value: "${registry}:${env.BUILD_NUMBER}")
                        ]
                }
            }
        }
    }

    post {
        cleanup {
            steps {
                script {
                    sh 'docker rmi ${registry}:${env.BUILD_NUMBER} || true'
                }
            }
        }
    }
}
